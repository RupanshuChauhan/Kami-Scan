// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // KamiScan specific fields
  isAdmin       Boolean   @default(false)
  subscription  String    @default("free") // free, pro, enterprise
  usageCount    Int       @default(0)
  usageLimit    Int       @default(5) // Monthly limit
  lastResetDate DateTime  @default(now())
  
  // Security form completion
  securityFormCompleted Boolean @default(false)
  
  accounts      Account[]
  sessions      Session[]
  securityForm  SecurityForm?
  pdfProcessing PDFProcessing[]
  payments      Payment[]
  chatSessions  ChatSession[]
  chatMessages  ChatMessage[]
}

model SecurityForm {
  id               String   @id @default(cuid())
  userId           String   @unique
  fullName         String
  phoneNumber      String
  address          String
  purposeOfUse     String   // business, education, personal, research
  organizationName String?
  agreedToTerms    Boolean  @default(true)
  agreedToPrivacy  Boolean  @default(true)
  submittedAt      DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PDFProcessing {
  id          String   @id @default(cuid())
  userId      String
  fileName    String
  fileSize    Int
  summary     String   @db.Text
  metadata    Json?    // Store additional processing metadata
  processedAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChatSession {
  id           String        @id @default(cuid())
  userId       String
  pdfId        String
  title        String
  metadata     Json?
  createdAt    DateTime      @default(now())
  lastActivity DateTime      @default(now())
  
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages ChatMessage[]
}

model ChatMessage {
  id            String      @id @default(cuid())
  sessionId     String
  userId        String
  role          String      // 'user', 'assistant', 'system'
  content       String      @db.Text
  metadata      Json?       // Store citations, reactions, etc.
  createdAt     DateTime    @default(now())
  
  session ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
  id                 String    @id @default(cuid())
  userId             String
  amount             Float     // Amount in INR
  currency           String    @default("INR")
  status             String    // pending, completed, failed
  plan               String    // starter, pro, enterprise
  razorpayOrderId    String?   @unique
  razorpayPaymentId  String?   @unique
  razorpaySignature  String?
  metadata           Json?
  createdAt          DateTime  @default(now())
  completedAt        DateTime?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
